=begin
#Catalog API

#This API gets and orders catalog items from different cloud sources.

The version of the OpenAPI document: 1.0.0
Contact: support@redhat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.1

=end

require 'cgi'

module OpenapiClient
  class PortfolioApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Tag for Portfolio Item
    # Adds a single tag to a Portfolio Item object
    # @param id [String] ID of the resource
    # @param tag_item [TagItem] 
    # @param [Hash] opts the optional parameters
    # @return [Tag]
    def add_portfolio_item_tag(id, tag_item, opts = {})
      data, _status_code, _headers = add_portfolio_item_tag_with_http_info(id, tag_item, opts)
      data
    end

    # Add Tag for Portfolio Item
    # Adds a single tag to a Portfolio Item object
    # @param id [String] ID of the resource
    # @param tag_item [TagItem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tag, Integer, Hash)>] Tag data, response status code and response headers
    def add_portfolio_item_tag_with_http_info(id, tag_item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.add_portfolio_item_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PortfolioApi.add_portfolio_item_tag"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PortfolioApi.add_portfolio_item_tag, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'tag_item' is set
      if @api_client.config.client_side_validation && tag_item.nil?
        fail ArgumentError, "Missing the required parameter 'tag_item' when calling PortfolioApi.add_portfolio_item_tag"
      end
      # resource path
      local_var_path = '/portfolio_items/{id}/tags'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(tag_item) 

      # return_type
      return_type = opts[:return_type] || 'Tag' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#add_portfolio_item_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a portfolio item to a portfolio
    # Adds a new portfolio item to an existing portfolio.
    # @param portfolio_id [String] The Portfolio ID
    # @param add_portfolio_item [AddPortfolioItem] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_portfolio_item_to_portfolio(portfolio_id, add_portfolio_item, opts = {})
      add_portfolio_item_to_portfolio_with_http_info(portfolio_id, add_portfolio_item, opts)
      nil
    end

    # Add a portfolio item to a portfolio
    # Adds a new portfolio item to an existing portfolio.
    # @param portfolio_id [String] The Portfolio ID
    # @param add_portfolio_item [AddPortfolioItem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_portfolio_item_to_portfolio_with_http_info(portfolio_id, add_portfolio_item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.add_portfolio_item_to_portfolio ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling PortfolioApi.add_portfolio_item_to_portfolio"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && portfolio_id !~ pattern
        fail ArgumentError, "invalid value for 'portfolio_id' when calling PortfolioApi.add_portfolio_item_to_portfolio, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'add_portfolio_item' is set
      if @api_client.config.client_side_validation && add_portfolio_item.nil?
        fail ArgumentError, "Missing the required parameter 'add_portfolio_item' when calling PortfolioApi.add_portfolio_item_to_portfolio"
      end
      # resource path
      local_var_path = '/portfolios/{portfolio_id}/portfolio_items'.sub('{' + 'portfolio_id' + '}', CGI.escape(portfolio_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(add_portfolio_item) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#add_portfolio_item_to_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Tag for Portfolio
    # Adds a single tag to Portfolio object
    # @param id [String] ID of the resource
    # @param tag_item [TagItem] 
    # @param [Hash] opts the optional parameters
    # @return [Tag]
    def add_portfolio_tag(id, tag_item, opts = {})
      data, _status_code, _headers = add_portfolio_tag_with_http_info(id, tag_item, opts)
      data
    end

    # Add Tag for Portfolio
    # Adds a single tag to Portfolio object
    # @param id [String] ID of the resource
    # @param tag_item [TagItem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tag, Integer, Hash)>] Tag data, response status code and response headers
    def add_portfolio_tag_with_http_info(id, tag_item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.add_portfolio_tag ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PortfolioApi.add_portfolio_tag"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PortfolioApi.add_portfolio_tag, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'tag_item' is set
      if @api_client.config.client_side_validation && tag_item.nil?
        fail ArgumentError, "Missing the required parameter 'tag_item' when calling PortfolioApi.add_portfolio_tag"
      end
      # resource path
      local_var_path = '/portfolios/{id}/tags'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(tag_item) 

      # return_type
      return_type = opts[:return_type] || 'Tag' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#add_portfolio_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a new portfolio
    # Adds a portfolio.
    # @param portfolio [Portfolio] Parameters needed to add a Portfolio
    # @param [Hash] opts the optional parameters
    # @return [Portfolio]
    def create_portfolio(portfolio, opts = {})
      data, _status_code, _headers = create_portfolio_with_http_info(portfolio, opts)
      data
    end

    # Add a new portfolio
    # Adds a portfolio.
    # @param portfolio [Portfolio] Parameters needed to add a Portfolio
    # @param [Hash] opts the optional parameters
    # @return [Array<(Portfolio, Integer, Hash)>] Portfolio data, response status code and response headers
    def create_portfolio_with_http_info(portfolio, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.create_portfolio ...'
      end
      # verify the required parameter 'portfolio' is set
      if @api_client.config.client_side_validation && portfolio.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio' when calling PortfolioApi.create_portfolio"
      end
      # resource path
      local_var_path = '/portfolios'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(portfolio) 

      # return_type
      return_type = opts[:return_type] || 'Portfolio' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#create_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing portfolio
    # Deletes the portfolio specified by the ID.
    # @param id [String] ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [RestoreKey]
    def destroy_portfolio(id, opts = {})
      data, _status_code, _headers = destroy_portfolio_with_http_info(id, opts)
      data
    end

    # Delete an existing portfolio
    # Deletes the portfolio specified by the ID.
    # @param id [String] ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(RestoreKey, Integer, Hash)>] RestoreKey data, response status code and response headers
    def destroy_portfolio_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.destroy_portfolio ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PortfolioApi.destroy_portfolio"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PortfolioApi.destroy_portfolio, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/portfolios/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RestoreKey' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#destroy_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all portfolio items from a specific portfolio
    # Gets all portfilio items in the portfolio specified by the given ID.
    # @param portfolio_id [String] The Portfolio ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @option opts [Object] :filter Filter for querying collections.
    # @return [PortfolioItemsCollection]
    def fetch_portfolio_items_with_portfolio(portfolio_id, opts = {})
      data, _status_code, _headers = fetch_portfolio_items_with_portfolio_with_http_info(portfolio_id, opts)
      data
    end

    # Get all portfolio items from a specific portfolio
    # Gets all portfilio items in the portfolio specified by the given ID.
    # @param portfolio_id [String] The Portfolio ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @option opts [Object] :filter Filter for querying collections.
    # @return [Array<(PortfolioItemsCollection, Integer, Hash)>] PortfolioItemsCollection data, response status code and response headers
    def fetch_portfolio_items_with_portfolio_with_http_info(portfolio_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.fetch_portfolio_items_with_portfolio ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling PortfolioApi.fetch_portfolio_items_with_portfolio"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && portfolio_id !~ pattern
        fail ArgumentError, "invalid value for 'portfolio_id' when calling PortfolioApi.fetch_portfolio_items_with_portfolio, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PortfolioApi.fetch_portfolio_items_with_portfolio, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PortfolioApi.fetch_portfolio_items_with_portfolio, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling PortfolioApi.fetch_portfolio_items_with_portfolio, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/portfolios/{portfolio_id}/portfolio_items'.sub('{' + 'portfolio_id' + '}', CGI.escape(portfolio_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PortfolioItemsCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#fetch_portfolio_items_with_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Tags for Portfolio
    # Returns an array of Tag objects
    # @param id [String] ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @option opts [Object] :filter Filter for querying collections.
    # @return [TagsCollection]
    def list_portfolio_tags(id, opts = {})
      data, _status_code, _headers = list_portfolio_tags_with_http_info(id, opts)
      data
    end

    # List Tags for Portfolio
    # Returns an array of Tag objects
    # @param id [String] ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @option opts [Object] :filter Filter for querying collections.
    # @return [Array<(TagsCollection, Integer, Hash)>] TagsCollection data, response status code and response headers
    def list_portfolio_tags_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.list_portfolio_tags ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PortfolioApi.list_portfolio_tags"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PortfolioApi.list_portfolio_tags, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PortfolioApi.list_portfolio_tags, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PortfolioApi.list_portfolio_tags, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling PortfolioApi.list_portfolio_tags, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/portfolios/{id}/tags'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TagsCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#list_portfolio_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List portfolios
    # Gets a list of portfolios.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page. (default to 100)
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set. (default to 0)
    # @option opts [Object] :filter Filter for querying collections.
    # @return [PortfoliosCollection]
    def list_portfolios(opts = {})
      data, _status_code, _headers = list_portfolios_with_http_info(opts)
      data
    end

    # List portfolios
    # Gets a list of portfolios.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The numbers of items to return per page.
    # @option opts [Integer] :offset The number of items to skip before starting to collect the result set.
    # @option opts [Object] :filter Filter for querying collections.
    # @return [Array<(PortfoliosCollection, Integer, Hash)>] PortfoliosCollection data, response status code and response headers
    def list_portfolios_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.list_portfolios ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PortfolioApi.list_portfolios, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling PortfolioApi.list_portfolios, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling PortfolioApi.list_portfolios, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/portfolios'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PortfoliosCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#list_portfolios\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Make a copy of the Portfolio
    # Make a copy of the Portfolio.
    # @param portfolio_id [String] The Portfolio ID
    # @param [Hash] opts the optional parameters
    # @return [Portfolio]
    def post_copy_portfolio(portfolio_id, opts = {})
      data, _status_code, _headers = post_copy_portfolio_with_http_info(portfolio_id, opts)
      data
    end

    # Make a copy of the Portfolio
    # Make a copy of the Portfolio.
    # @param portfolio_id [String] The Portfolio ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Portfolio, Integer, Hash)>] Portfolio data, response status code and response headers
    def post_copy_portfolio_with_http_info(portfolio_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.post_copy_portfolio ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling PortfolioApi.post_copy_portfolio"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && portfolio_id !~ pattern
        fail ArgumentError, "invalid value for 'portfolio_id' when calling PortfolioApi.post_copy_portfolio, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/portfolios/{portfolio_id}/copy'.sub('{' + 'portfolio_id' + '}', CGI.escape(portfolio_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Portfolio' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#post_copy_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group
    # Fetch share information about a portfolio
    # @param portfolio_id [String] The Portfolio ID
    # @param [Hash] opts the optional parameters
    # @return [Array<ShareInfo>]
    def share_info(portfolio_id, opts = {})
      data, _status_code, _headers = share_info_with_http_info(portfolio_id, opts)
      data
    end

    # Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group
    # Fetch share information about a portfolio
    # @param portfolio_id [String] The Portfolio ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ShareInfo>, Integer, Hash)>] Array<ShareInfo> data, response status code and response headers
    def share_info_with_http_info(portfolio_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.share_info ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling PortfolioApi.share_info"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && portfolio_id !~ pattern
        fail ArgumentError, "invalid value for 'portfolio_id' when calling PortfolioApi.share_info, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/portfolios/{portfolio_id}/share_info'.sub('{' + 'portfolio_id' + '}', CGI.escape(portfolio_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ShareInfo>' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#share_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Share a portfolio with one or more groups with specific permission
    # Share a Portfolio with one or more groups with specific permissions
    # @param portfolio_id [String] The Portfolio ID
    # @param share_policy [SharePolicy] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def share_portfolio(portfolio_id, share_policy, opts = {})
      share_portfolio_with_http_info(portfolio_id, share_policy, opts)
      nil
    end

    # Share a portfolio with one or more groups with specific permission
    # Share a Portfolio with one or more groups with specific permissions
    # @param portfolio_id [String] The Portfolio ID
    # @param share_policy [SharePolicy] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def share_portfolio_with_http_info(portfolio_id, share_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.share_portfolio ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling PortfolioApi.share_portfolio"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && portfolio_id !~ pattern
        fail ArgumentError, "invalid value for 'portfolio_id' when calling PortfolioApi.share_portfolio, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'share_policy' is set
      if @api_client.config.client_side_validation && share_policy.nil?
        fail ArgumentError, "Missing the required parameter 'share_policy' when calling PortfolioApi.share_portfolio"
      end
      # resource path
      local_var_path = '/portfolios/{portfolio_id}/share'.sub('{' + 'portfolio_id' + '}', CGI.escape(portfolio_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(share_policy) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#share_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific portfolio
    # Gets the portfolio specified by the portfolio ID.
    # @param id [String] ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Portfolio]
    def show_portfolio(id, opts = {})
      data, _status_code, _headers = show_portfolio_with_http_info(id, opts)
      data
    end

    # Get a specific portfolio
    # Gets the portfolio specified by the portfolio ID.
    # @param id [String] ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Portfolio, Integer, Hash)>] Portfolio data, response status code and response headers
    def show_portfolio_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.show_portfolio ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PortfolioApi.show_portfolio"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PortfolioApi.show_portfolio, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/portfolios/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Portfolio' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#show_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches the specified portfolio's icon image
    # Fetch the specified portfolio's icon image.
    # @param portfolio_id [String] The Portfolio ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def show_portfolio_icon(portfolio_id, opts = {})
      show_portfolio_icon_with_http_info(portfolio_id, opts)
      nil
    end

    # Fetches the specified portfolio&#39;s icon image
    # Fetch the specified portfolio&#39;s icon image.
    # @param portfolio_id [String] The Portfolio ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def show_portfolio_icon_with_http_info(portfolio_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.show_portfolio_icon ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling PortfolioApi.show_portfolio_icon"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && portfolio_id !~ pattern
        fail ArgumentError, "invalid value for 'portfolio_id' when calling PortfolioApi.show_portfolio_icon, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/portfolios/{portfolio_id}/icon'.sub('{' + 'portfolio_id' + '}', CGI.escape(portfolio_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/svg+xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#show_portfolio_icon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Undelete specific portfolio
    # Undeletes the portfolio specified by the portfolio ID.
    # @param id [String] ID of the resource
    # @param restore_key [RestoreKey] 
    # @param [Hash] opts the optional parameters
    # @return [Portfolio]
    def un_delete_portfolio(id, restore_key, opts = {})
      data, _status_code, _headers = un_delete_portfolio_with_http_info(id, restore_key, opts)
      data
    end

    # Undelete specific portfolio
    # Undeletes the portfolio specified by the portfolio ID.
    # @param id [String] ID of the resource
    # @param restore_key [RestoreKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Portfolio, Integer, Hash)>] Portfolio data, response status code and response headers
    def un_delete_portfolio_with_http_info(id, restore_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.un_delete_portfolio ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PortfolioApi.un_delete_portfolio"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PortfolioApi.un_delete_portfolio, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'restore_key' is set
      if @api_client.config.client_side_validation && restore_key.nil?
        fail ArgumentError, "Missing the required parameter 'restore_key' when calling PortfolioApi.un_delete_portfolio"
      end
      # resource path
      local_var_path = '/portfolios/{id}/undelete'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(restore_key) 

      # return_type
      return_type = opts[:return_type] || 'Portfolio' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#un_delete_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unshare a portfolio from one or more groups with specific permission
    # Unshare a Portfolio with one or more groups with specific permissions
    # @param portfolio_id [String] The Portfolio ID
    # @param unshare_policy [UnsharePolicy] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unshare_portfolio(portfolio_id, unshare_policy, opts = {})
      unshare_portfolio_with_http_info(portfolio_id, unshare_policy, opts)
      nil
    end

    # Unshare a portfolio from one or more groups with specific permission
    # Unshare a Portfolio with one or more groups with specific permissions
    # @param portfolio_id [String] The Portfolio ID
    # @param unshare_policy [UnsharePolicy] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unshare_portfolio_with_http_info(portfolio_id, unshare_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.unshare_portfolio ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling PortfolioApi.unshare_portfolio"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && portfolio_id !~ pattern
        fail ArgumentError, "invalid value for 'portfolio_id' when calling PortfolioApi.unshare_portfolio, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'unshare_policy' is set
      if @api_client.config.client_side_validation && unshare_policy.nil?
        fail ArgumentError, "Missing the required parameter 'unshare_policy' when calling PortfolioApi.unshare_portfolio"
      end
      # resource path
      local_var_path = '/portfolios/{portfolio_id}/unshare'.sub('{' + 'portfolio_id' + '}', CGI.escape(portfolio_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(unshare_policy) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#unshare_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an existing portfolio
    # Returns the edited portfolio.
    # @param id [String] ID of the resource
    # @param portfolio [Portfolio] Parameters needed to update a Portfolio
    # @param [Hash] opts the optional parameters
    # @return [Portfolio]
    def update_portfolio(id, portfolio, opts = {})
      data, _status_code, _headers = update_portfolio_with_http_info(id, portfolio, opts)
      data
    end

    # Edit an existing portfolio
    # Returns the edited portfolio.
    # @param id [String] ID of the resource
    # @param portfolio [Portfolio] Parameters needed to update a Portfolio
    # @param [Hash] opts the optional parameters
    # @return [Array<(Portfolio, Integer, Hash)>] Portfolio data, response status code and response headers
    def update_portfolio_with_http_info(id, portfolio, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PortfolioApi.update_portfolio ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PortfolioApi.update_portfolio"
      end
      pattern = Regexp.new(/^\d+$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PortfolioApi.update_portfolio, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'portfolio' is set
      if @api_client.config.client_side_validation && portfolio.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio' when calling PortfolioApi.update_portfolio"
      end
      # resource path
      local_var_path = '/portfolios/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(portfolio) 

      # return_type
      return_type = opts[:return_type] || 'Portfolio' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PortfolioApi#update_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
